plot(1:30)
hist(rnorm(100))
library(ggplot2)
library(randomForest)
help("mean")
help.search("randomForest")
x = c(0:10,50,60)
mean(x)
sum(x)
max(x)
min(x)
plot(1:30)
hist(rnorm(100))
a <- 7
b <- 8
(a == 7) & (b != 9)
num <- 2.5
num2 <- 4
x <- -123
class(x)
is.integer(num2)
is.numeric(num2)
class(y)
y = as.integer(num2)
class(y)
x2<-3.14
y2 = as.integer(3.14)
y2
as.integer('4.27')
as.integer("Joe")
as.integer('Joe')
as.integer(TRUE)
#Caracteres
char1 <- "A"
is.character(char1)
#Números complexos
compl = 2.5 + 4i
compl
class(compl)
sqrt(1)
sqrt(-1+0i)
sqrt(as.complex(-1))
#Logico
x = 1
y = 2
z = x > y
class(z)
#Vetor: possui 1 dimensão e 1 tipo de dado
vetor1 <- c(1:10)
vetor1
length(vetor1)
length(vetor1) #tamanho
mode(vetor1)
class(vetor1)
typeof(vetor1)
#Matriz: possui 2 dimensões e 1 tipo de dado
matriz1 <- matrix(1:12,nrow = 4)
View(matriz1)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
#Array: possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5,dim = c(4,4,1))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
#Data Frames: dados de diferentes tipos
#Maneira mais fácil de explicar data frames: é uma matriz com diferentes tipos de dados
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
#Listas: coleção de diferentes objetos
#Diferentes tipos de dados são possíveis e comuns
lista1 <- list(a=matriz1,b=vetor1)
View(matriz1)
View(lista1)
View(lista1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
#Funções também são vistas como objetos em R
fun1 <- function(x){
var1 <- x*x
return(var1)
}
fun1(5)
class(fun1)
#Removendo objetos
objects()
rm(array1, fun1)
objects()
var1 = 367
var1
mode(var1)
help("mode")
sqrt(var1)
var2 = as.integer(var1)
var2
is.integer(var2)
mode(var2)
typeof(var2)
var3 = c("seg","ter","qua","qui")
var3
mode(var3)
typeof(var3)
var4 = function(x){x+3}
var4
mode(var4)
typeof(var4)
var4(3)
#Mudando o modo do dado
var5 = as.character(var1)
var5
mode(var5)
typeof(var5)
#Atribuir valores a objetos
x <- c(4,5,6)
x
c(4,5,6) -> y
y
assign("x",c(1.3,4,-2))
x[1]
y[2]
#Verificando objetos
ls()
ls()
objects()
length(ls())
length(objects())
#Remover objetos
rm(x)
x
#Número de linhas
matrix(c(1,2,3,4,5,6), nr=2)
matrix(c(1,2,3,4,5,6), nr=3)
matrix(c(1,2,3,4,5,6), nr=6)
#Número de colunas
matrix(c(1,2,3,4,5,6), nc=2)
#help
?matrix
#Matrizes precisam ter um número para de valores
matrix(c(1,2,3,4,5), nc=2)
#Criando matrizes a partir de vetores e preenchendo a partir de linhas ou colunas
meus_dados = c(1:10)
#Preenchendo por linhas
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
#Preenchendo por colunas
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = F)
#Fatiando a Matriz
mat <- matrix(c(2,3,4,5),nr = 2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
#Imprimir coluna inteira
mat[,2]
#Imprimir linha inteira
mat[1,]
#Criando uma matriz diagonal
matriz = 1:3
diag(matriz)
#Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
diag(vetor)
#Transpose a matrix
w <- matrix(c(2,4,8,12), nr = 2, ncol = 2)
w
t(w)
u <- t(w)
u
#Obtendo uma matriz inversa
solve(w)
#Multiplicando matrizes
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
#Multiplicando matriz com vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
x * y
y
x * y
#Nomeando as dimensões de uma matriz
mat3 <- matrix(c('futebol','Natação','Campo','Piscina'), nr = 2)
mat3
dimnames(mat3) = (list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
mat3
#Identificando linhas e colunas no momento da criação da Matriz
matrix(c(4,6,8,9), nr = 2, nc = 2, dimnames = list(c("Linha 1", "Linha 2"), c("Coluna 1", "Coluna 2")))
#Combinando Matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
#Combinação por colunas
cbind(mat4,mat5)
#Combinação por linhas
rbind(mat4,mat5)
#Transformando a Matriz em vetor
c(mat4)
#Vetor de caracteres
vetor_caracter = c("Olá","DSA")
vetor_caracter
#Vetor de floats
vetor_numerico = c(1.9,45.2,300.5)
vetor_numerico
#vetor com números complexos
vetor_complexo = c(5.2+3i,3.8 + 4i)
vetor_complexo
#vetor de valores lógicos
vetor_logico = c(TRUE,FALSE,TRUE,TRUE)
vetor_logico
#Utilizando a função seq()
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
#Utilizando a função rep()
vetor2 = rep(1:5)
vetor2
#Indexação de vetores
a <- c(1,2,3,4,5)
a[1]
a[2]
b <- c("Data","Sciense")
b[1]
#Combinando Vetores
v1 = c(2,3,5)
v2 = c("aa","bb","cc","dd","ee")
#Concatena os vetores, porém o tipo predominante será character
c(v1,v2)
#Operações com vetores
x = c(1,3,5,7)
y = c(2,4,6,8)
x*5
x+y
x-y
x*y
x/y
#Somando vetores com número diferente de elementos
alfa = c(10,20,30)
beta = c(1,2,3,4,5,6,7,8,9)
alfa+beta
#Vetor Nomeado
v = c("Barack","Obama","45")
v
names(v) = c("Nome","Sobrenome","")
v
v["Nome"]
install.packages("stringr")
#Criando um dataframe vazio
df <- data.frame()
class(df)
df
#Criando vetores vazios
nomes <- character()
idades <- numeric()
datas <- as.Date(character())
codigos <- integer()
#Atribuindo os vetores no data.frame, como descritores dos campos
df <- data.frame(c(nomes, idades,datas, codigos))
#Criando vetores
pais = c("EUA","Dinamarca","Holanda","Espanha","Brasil","Brasil")
nome = c("Maurício","Ramon","Pedro","Aline","Marta","Janne")
altura = c(1.78,1.72,1.63,1.59,1.63,1.59)
codigo = c(5501,2183,4702,7965,8890,3110)
#Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome,altura, codigo)
pesquisa
#Adicionando um novo vetor a um dataframe existente
olhos = c("verde","azul","azul","castanho","verde","castanho")
#tarefa comum na analise de dados. Após a limpeza de dados você une os dados dimensão por dimensão no dataframe
pesq = cbind(pesquisa,olhos)
pesq
#Informações sobre o dataframe
#Resumo do df
str(pesq)
#Número de dimensões
dim(pesq)
#Tamanho em linhas
length(pesq)
#Obtendo um vetor de um data frame
pesq$pais
pesq$nome
#Extraindo um único valor
pesq[1,1]
pesq[3,2]
#Número de Linhas e Colunas
nrow(pesq)
ncol(pesq)
#Primeiros elementos do dataframe
head(pesq)
head(mtcars)
#Últimos elementos do dataframe
tail(pesq)
tail(mtcars)
#Data frames built in R
?mtcars
mtcars
#Fitro para um subdataset de dados que atendem a um critério
pesq[altura < 1.6,]
pesq[altura < 1.6, c('codigo','olhos')]
pesq
#Dataframes nomeados
names(pesq) <- c("Pais","Nome","Altura","Código","Olhos")
pesq
colnames(pesq) <- c("Var 1","Var 2","Var 3","Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2","Obs 3","Obs 4","Obs 5","Obs 6")
pesq
colnames(pesq)
?read.csv
df2 <- data.frame(read.csv("e:/Programas_Doutorado/TextMining_R/articles_txt/pubmed18324520.txt",header=TRUE,sep="\n"))
head(df2)
summary(df2)
plot(df2)
summary(mtcars$mpg)
plot(mtcars$mpg,mtcars$disp)
plot(mtcars$mpg,mtcars$wt)
#Combinando dataframes
#Os dataframes tem que ter a mesma estrutura, caso contrário alguns valores poderão ficar duplicados
df3 <- merge(pesq,df2)
df3
#IF-else
x = 25
if(x<30)
{"Este número é menor que 30"}
#Chaves não são obrigatórias, mas altamente recomendadas
if(x<30)
"Este número é menor que 30"
#else
if(x<30){
"Este número é menor que 30"
}else if(x == 30){
"Este número é igual a 30"
}else{
"Este número é maior que trinta"
}
#Ifelse. Semelhante ao PHP
x = 6
ifelse(x<6,"Correto",NA)
#Expressões ifelseaninhadas
x = c(7,5,4)
ifelse(x<5,"Menor que 5",
ifelse(x==5, "Igual a 5","Maior que 5"))
#Estruturas if dentro de funções
func1 <- function(x,y){
ifelse(y<7,x+y,"Não encontrado")
}
func1(4,2)
func1(40,7)
#Rep
rep(rnorm(10),5)
#Repeat
x = 1
repeat{
x = x+3
if(x>99)
break
print(x)
}
#Loop For
for(i in 1:20){print(i)}
for(q in rnorm(10)){print(q)}
#ignora alguns elmentos dentro do loop
for(i in 1:22){
if(i == 13 | i == 15)
next
print(i)
}
#Interromper o loop
for(i in 1:22){
if(i == 13)
break
print(i)
}
#Loop while
x=1
while(x < 5){
x = x+1
print(x)
}
#
#
#
#
#
