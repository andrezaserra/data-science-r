install.packages("readr")
library(tibble)
library(dplyr)
library(data.table)
library(tibble)
library(dplyr)
library(data.table)
############################################################################################
#Importando dataset
setwd("Manipulacao-e-transformacao-de-dados")
imdb <- readr::read_rds("imdb.rds")
library(tibble)
library(dplyr)
library(data.table)
############################################################################################
#Importando dataset
setwd("C:\Users\acbse\OneDrive\Documentos\ANÁLISE DE DADOS COM R\2- Manipulação e Transformação de Dados\dataset imdb")
imdb <- readr::read_rds("imdb.rds")
#############################################################################################
#Filtrando linhas do dataset / filter()
nota_acima_8 = imdb %>% filter(nota_imdb > 8)
View(imdb)
nota_acima_8_ano_maior_2010 = imdb %>% filter(ano > 2010 & nota_imdb > 8)
View(nota_acima_8_ano_maior_2010)
imdb %>% filter(receita > orcamento | nota_imdb > 9)
imdb %>% filter(receita > orcamento)
# O operador %in% é muito útil na hora de criar filtros. O resultado das operações com %in% é um vetor
# lógico do tamanho do vetor do elemento da esquerda, identificando quais elementos da esquerda batem
# com algum elemento da direita.
imdb %>% filter(diretor %in% c("Steven Spielberg", "Quentin Tarantino"))
# Pode utilizar a função str_detect
library(stringr)
imdb %>%
filter(str_detect(generos, "Comedy"))
#################################################################################################
# Selecionando colunas do dataset / select()
imdb %>%
select(titulo, ano, orcamento)
imdb %>%
select(starts_with("ator"))
imdb %>%
select(titulo, ator_1:ator_3)
#Remover colunas
imdb %>%
select(-ano, - diretor, -cor)
imdb %>%
select(-starts_with("ator"))
################################################################################################
# Ordenando o dataset / arrange()
imdb %>%
arrange(orcamento) %>%
select(orcamento, everything())
imdb %>%
arrange(-orcamento) %>%
select(orcamento, everything())
imdb %>%
arrange(-ano, titulo) %>%
select(titulo, ano, everything())
################################################################################################
# mutate() - cria/modifica colunas
imdb %>%
mutate(duracao = duracao/60) %>%
select(duracao)
#Padronizar dados da coluna duracao
imdb %>%
mutate(duracao = scale(duracao, center = FALSE)) %>%
select(duracao)
#Normalizar dados da coluna duracao
imdb %>%
mutate(duracao = scale(duracao, center = TRUE)) %>%
select(duracao)
# Criando uma nova coluna
n_imdb = imdb %>%
mutate(duracao_horas = duracao/60) %>%
select(duracao, duracao_horas)
imdb %>%
mutate(
lucro = receita - orcamento,
resultado = ifelse(lucro < 0, "prejuizo", "lucro")
) %>%
select(lucro, resultado)
imdb %>%
summarise(media_orcamento = mean(orcamento, na.rm = TRUE),qtd = n())
imdb %>%
summarise(media_orcamento = mean(orcamento, na.rm = TRUE),qtd = n())
imdb %>%
summarise(
media_orcamento = mean(orcamento, na.rm = TRUE),
mediana_orcamento = median(orcamento, na.rm = TRUE),
qtd = n(),
qtd_diretores = n_distinct(diretor)
)
anos = imdb %>%
group_by(ano) %>%
summarise(qtd_filmes = n())
anos = imdb %>%
group_by(ano) %>%
summarise(qtd_filmes = n())
imdb %>%
group_by(diretor) %>%
summarise(orcamento_medio = mean(orcamento, na.rm = TRUE))
