# id: Identificação única da linha (não use este atributo para treinar seu modelo)
# label: 's' ('Sugi' floresta), 'h' ('Hinoki' floresta), 'd' ('Mixed deciduous' floresta), 'o' ('Other' não floresta)
# b1: Banda do verde corresponde ao mês de setembro de 2010
# b2: Banda do vermelho corresponde ao mês de setembro de 2011
# b3: Banda do infravermelho próximo corresponde ao mês de setembro de 2011
# b4: Banda do verde corresponde ao mês de Março de 2011
# b5: Banda do vermelho corresponde ao mês de Março de 2011
# b6: Banda do infravermelho próximo corresponde ao mês de Março de 2011
# b7: Banda do verde corresponde ao mês de Maio de 2011
# b8: Banda do vermelho corresponde ao mês de Maio de 2011
# b9: Banda do infravermelho próximo corresponde ao mês de Maio de 2011
# pred_minus_obs_S_b1 até pred_minus_obs_S_b9: Valores espectrais previstos (Com base na interpolação espacial) subtraido dos valores espectrais reais para a classe 's'
# pred_minus_obs_S_b1 até pred_minus_obs_H_b9: Valores espectrais previstos (Com base na interpolação espacial) subtraido dos valores espectrais reais para a classe 'h'
df <- read.table(caminho, col.names = c('id','label','b1','b2','b3',
'b4','b5','b6','b7','b8','b9','PMs','PMh'))
df <- read.table(caminho)
View(df)
df_total = read.csv2('treino.csv', sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
df_total = read.csv2('C:\Users\acbse\OneDrive\Área de Trabalho\STUDY\WORCAP 2020\Hackathon ds\treino.csv', sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
library(caret)
library(dplyr)
library(data.table)
library(caret)
library(readr)
caminho <- file.choose()
# Dados do dataset
# id: Identificação única da linha (não use este atributo para treinar seu modelo)
# label: 's' ('Sugi' floresta), 'h' ('Hinoki' floresta), 'd' ('Mixed deciduous' floresta), 'o' ('Other' não floresta)
# b1: Banda do verde corresponde ao mês de setembro de 2010
# b2: Banda do vermelho corresponde ao mês de setembro de 2011
# b3: Banda do infravermelho próximo corresponde ao mês de setembro de 2011
# b4: Banda do verde corresponde ao mês de Março de 2011
# b5: Banda do vermelho corresponde ao mês de Março de 2011
# b6: Banda do infravermelho próximo corresponde ao mês de Março de 2011
# b7: Banda do verde corresponde ao mês de Maio de 2011
# b8: Banda do vermelho corresponde ao mês de Maio de 2011
# b9: Banda do infravermelho próximo corresponde ao mês de Maio de 2011
# pred_minus_obs_S_b1 até pred_minus_obs_S_b9: Valores espectrais previstos (Com base na interpolação espacial) subtraido dos valores espectrais reais para a classe 's'
# pred_minus_obs_S_b1 até pred_minus_obs_H_b9: Valores espectrais previstos (Com base na interpolação espacial) subtraido dos valores espectrais reais para a classe 'h'
df <- read.table(caminho, col.names = c('b1','b2','b3','b4','b5','b6','b7','b8','b9',
'pred_minus_obs_H_b1','pred_minus_obs_H_b2',
'pred_minus_obs_H_b3','pred_minus_obs_H_b4',
'pred_minus_obs_H_b5','pred_minus_obs_H_b6',
'pred_minus_obs_H_b7','pred_minus_obs_H_b8',
'pred_minus_obs_H_b9','pred_minus_obs_S_b1',
'pred_minus_obs_S_b2','pred_minus_obs_S_b3',
'pred_minus_obs_S_b4','pred_minus_obs_S_b5',
'pred_minus_obs_S_b6','pred_minus_obs_S_b7',
'pred_minus_obs_S_b8','pred_minus_obs_S_b9','label')
View(df)
View(df)
View(df)
df <- read.table(caminho, col.names = c('b1','b2','b3','b4','b5','b6','b7','b8','b9',
'pred_minus_obs_H_b1','pred_minus_obs_H_b2',
'pred_minus_obs_H_b3','pred_minus_obs_H_b4',
'pred_minus_obs_H_b5','pred_minus_obs_H_b6',
'pred_minus_obs_H_b7','pred_minus_obs_H_b8',
'pred_minus_obs_H_b9','pred_minus_obs_S_b1',
'pred_minus_obs_S_b2','pred_minus_obs_S_b3',
'pred_minus_obs_S_b4','pred_minus_obs_S_b5',
'pred_minus_obs_S_b6','pred_minus_obs_S_b7',
'pred_minus_obs_S_b8','pred_minus_obs_S_b9','label'))
df <- read.table()
df_total = read.csv2(df, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
df <- read.table(caminho)
df_total = read.csv2(df, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
View(df)
View(df)
df_total = read.csv2(df, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
View(df_total)
df_total = df_Train
df_Train <- df_total
dataset <- df_total
# SUMARIZAÇÃO E ANÁLISE EXPLORATÓRIA DE DADOS
percentage <- prop.table(table(dataset$label)) * 100
cbind(freq=table(dataset$label), percentage=percentage)
summary(dataset)
str(dataset)
View(dataset)
# divisão entre atributos de entrada e atributo de saída
x <- dataset[,1:9]
y <- factor(dataset[,28])
par(mfrow=c(1,7))
for(i in 1:7) {
boxplot(x[,i], main=names(x)[i])
}
par(mfrow=c(1,9))
for(i in 1:9) {
boxplot(x[,i], main=names(x)[i])
}
View(x)
par(mfrow=c(1,8))
for(i in 1:8) {
boxplot(x[,i], main=names(x)[i])
}
par(mfrow=c(1,8))
for(i in 1:9) {
boxplot(x[,i], main=names(x)[i])
}
par(mfrow=c(1,9))
for(i in 1:9) {
boxplot(x[,i], main=names(x)[i])
}
par(mfrow=c(1,9))
for(i in 1:9) {
boxplot(x[,i], main=names(x)[i])
}
# Matriz de dispersão considerando atributos de entrada e saída
featurePlot(x=x, y=y, plot="ellipse")
library(caret)
library(dplyr)
library(data.table)
library(caret)
library(readr)
# Matriz de dispersão considerando atributos de entrada e saída
featurePlot(x=x, y=y, plot="ellipse")
# Matriz de dispersão considerando atributos de entrada e saída
featurePlot(x=x, y=y, plot="ellipse")
# Plot de distribuição, considerando atributos de entrada e saída
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot="density", scales=scales)
#colocando a col label como factor
dataset$label = factor(dataset$label)
View(dataset)
# Uso de cross validation, com k-fold = 10
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(9)
fit.lda <- train(Var~., data=training, method="lda",
metric=metric, trControl=control)
set.seed(9)
fit.lda <- train(Var~., data=dataset, method="lda",
metric=metric, trControl=control)
set.seed(9)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
set.seed(9)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
# Uso de cross validation, com k-fold = 10
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(9)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
#colocando a col label como factor
dataset$label = factor(dataset$label)
str(dataset)
dataset <- data.frame(b1, b2, b3, b4, b5, b6, b7, b8, b9, label)
# --Treinamento e testes de algoritmos--
dataset = dataset[,c(1:9, 28)]
# --Treinamento e testes de algoritmos--
dataset <- dataset[,c(1:9, 28)]
library(caret)
library(dplyr)
library(data.table)
library(caret)
library(readr)
caminho <- file.choose()
df <- read.table(caminho)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset <- df_total
#colocando a col label como factor
dataset$label = factor(dataset$label)
View(dataset)
str(dataset)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# --Treinamento e testes de algoritmos--
dataset <- dataset[,c(1:9, 28)]
View(dataset)
set.seed(9)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
set.seed(9)
fit.knn <- train(label~., data=dataset, method="knn",
metric=metric, trControl=control)
View(fit.knn)
View(fit.lda)
set.seed(9)
fit.svm <- train(label~., data=training, method="svmRadial",
metric=metric, trControl=control)
set.seed(9)
fit.svm <- train(label~., data=dataset, method="svmRadial",
metric=metric, trControl=control)
View(fit.svm)
set.seed(9)
fit.rf <- train(label~., data=dataset, method="rf",
metric=metric, trControl=control)
View(fit.rf)
results <- resamples(list(lda=fit.lda, cart=fit.cart,
knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
set.seed(9)
fit.cart <- train(label~., data=dataset, method="rpart",
metric=metric, trControl=control)
View(fit.cart)
View(fit.knn)
View(fit.svm)
View(fit.lda)
# Resumos das acurácias dos modelos
results <- resamples(list(lda=fit.lda, cart=fit.cart,
knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# Visualização das acurácias para comparação
dotplot(results)
# Sumarizando o melhor modelo
print(fit.lda)
library(caret)
library(dplyr)
library(data.table)
library(caret)
library(readr)
caminho <- file.choose()
df <- read.table(caminho)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset <- df_total
dataset$label = factor(dataset$label)
str(dataset)
# Uso de cross validation, com k-fold = 10
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# --Treinamento e testes de algoritmos--
dataset <- dataset[,c(1:9, 28)]
# Algoritmos lineares
set.seed(9)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
# Algoritmos não lineares
set.seed(9)
fit.cart <- train(label~., data=dataset, method="rpart",
metric=metric, trControl=control)
# kNN
set.seed(9)
fit.knn <- train(label~., data=dataset, method="knn",
metric=metric, trControl=control)
# SVM
set.seed(9)
fit.svm <- train(label~., data=dataset, method="svmRadial",
metric=metric, trControl=control)
# Random Forest
set.seed(9)
fit.rf <- train(label~., data=dataset, method="rf",
metric=metric, trControl=control)
View(dataset)
View(df)
View(dataset)
library(caret)
library(dplyr)
library(data.table)
library(caret)
library(readr)
caminho <- file.choose()
df <- read.table(caminho)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
View(df_total)
dataset <- df_total
#colocando a col label como factor
dataset$label = factor(dataset$label)
str(dataset)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# --Treinamento e testes de algoritmos--
dataset <- dataset[,c(1:10, 29)]
View(dataset)
# Algoritmos lineares
set.seed(9)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
# Algoritmos não lineares
set.seed(9)
fit.cart <- train(label~., data=dataset, method="rpart",
metric=metric, trControl=control)
# kNN
set.seed(9)
fit.knn <- train(label~., data=dataset, method="knn",
metric=metric, trControl=control)
# SVM
set.seed(9)
fit.svm <- train(label~., data=dataset, method="svmRadial",
metric=metric, trControl=control)
# Random Forest
set.seed(9)
fit.rf <- train(label~., data=dataset, method="rf",
metric=metric, trControl=control)
results <- resamples(list(lda=fit.lda, cart=fit.cart,
knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# Uso de cross validation, com k-fold = 10
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# --Treinamento e testes de algoritmos--
dataset <- dataset[,c(1:10, 29)]
View(dataset)
set.seed(9)
fit.lda <- train(label~., data=dataset, method="lda",
metric=metric, trControl=control)
set.seed(9)
fit.cart <- train(label~., data=dataset, method="rpart",
metric=metric, trControl=control)
set.seed(9)
fit.knn <- train(label~., data=dataset, method="knn",
metric=metric, trControl=control)
set.seed(9)
fit.svm <- train(label~., data=dataset, method="svmRadial",
metric=metric, trControl=control)
set.seed(9)
fit.rf <- train(label~., data=dataset, method="rf",
metric=metric, trControl=control)
results <- resamples(list(lda=fit.lda, cart=fit.cart,
knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# Sumarizando o melhor modelo
print(fit.lda)
caminho <- file.choose()
df <- read.table(caminho)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset_TESTE <- df_total
View(dataset_TESTE)
dataset_TESTE$label = factor(dataset_TESTE$label)
str(dataset_TESTE)
dataset_TESTE <- dataset[,c(1:10)]
View(dataset_TESTE)
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(predictions_lda)
View(lda)
lda <- data.frame(id, predictions_lda)
lda <- data.frame(dataset_TESTE.id, predictions_lda)
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(dataset_TESTE[,1], predictions_lda)
View(lda)
View(lda)
View(lda)
write.csv(lda, "submission_lda.csv")
write.csv(lda, "submission_lda.csv")
write.csv2(lda, "submission_lda.csv")
View(lda)
write.csv2(lda, caminho <- file.choose())
caminho <- file.choose()
View(lda)
View(lda)
View(lda)
write.csv2(lda, caminho, row.names = FALSE)
caminho <- file.choose()
lda <- data.frame(predictions_lda)
View(lda)
caminho <- file.choose()
write.csv2(lda, caminho, row.names = FALSE)
View(lda)
caminho <- file.choose()
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(predictions_lda)
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(dataset_TESTE[,1], predictions_lda)
View(lda)
lda[1,] <- c('id', 'label')
lda[0,] <- c('id', 'label')
View(lda)
lda <- data.frame(dataset_TESTE[,1], predictions_lda, row.names = 'id', 'label')
lda <- data.frame(dataset_TESTE[,1], predictions_lda, colnames('id', 'label'))
lda <- read.table(lda, col.names = c('id','label'))
caminho <- file.choose()
lda <- read.table(caminho, col.names = c('id','label'))
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(dataset_TESTE[,1], predictions_lda)
lda <- read.table(caminho, col.names = c('id','label'))
library(tidyverse)
caminho <- file.choose()
df <- read.table(caminho)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset_TESTE <- df_total
dataset_TESTE <- dataset[,c(1:10)]
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(dataset_TESTE[,1], predictions_lda)
View(lda)
caminho <- file.choose()
write.csv2(lda, caminho)
caminho <- file.choose()
df <- read.table(caminho)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset_TESTE <- df_total
dataset_TESTE <- dataset[,c(1:10)]
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(predictions_lda)
caminho <- file.choose()
write.csv2(lda, caminho)
caminho <- file.choose()
lda.to_csv(caminho, index=False)
lda.to_csv(caminho, index=False)
lda <- data.frame(predictions_lda)
write.csv(lda, caminho)
caminho
caminho <- file.choose()
write.csv(lda, caminho)
names(lda) <- c('id', 'label')
lda <- data.frame(id = dataset_TESTE[,1], label = predictions_lda)
View(lda)
caminho <- file.choose()
write.csv(lda, caminho)
write.csv2(lda, caminho)
write.csv2(lda, caminho, append = FALSE)
caminho <- file.choose()
df <- read.table(caminho)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset_TESTE <- df_total
dataset_TESTE <- dataset[,c(1:10)]
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
View(dataset)
dataset_TESTE <- df
dataset_TESTE <- dataset[,c(1:10)]
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(id = dataset_TESTE[,1], label = predictions_lda)
caminho <- file.choose()
write.csv(lda, caminho, append = FALSE)
caminho <- file.choose()
df <- read.table(caminho)
caminho <- file.choose()
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset_TESTE <- df_total
dataset_TESTE <- dataset[,c(1:10)]
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(id = dataset_TESTE[,1], label = predictions_lda)
View(lda)
View(lda)
caminho <- file.choose()
write.csv(lda, caminho, append = FALSE)
caminho <- file.choose()
write.csv(lda, caminho, append = FALSE)
View(dataset_TESTE)
View(dataset_TESTE)
View(df_total)
View(df)
caminho <- file.choose()
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
View(df_total)
dataset_TESTE <- df_total
dataset_TESTE <- dataset[,c(1:10)]
View(df_total)
View(df_total)
View(df)
View(df)
View(df)
View(dataset_TESTE)
View(dataset_TESTE)
View(dataset_TESTE)
View(df)
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
View(df_total)
caminho <- file.choose()
df_total = read.csv2(caminho, sep = ',',
stringsAsFactors = FALSE, encoding = 'UTF-8')
dataset_TESTE <- df_total
dataset_TESTE <- dataset[,c(1:10)]
View(df_total)
dataset_TESTE <- df_total
dataset_TESTE <- df_total[,c(1:10)]
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(id = dataset_TESTE[,1], label = predictions_lda)
caminho <- file.choose()
write.csv(lda, caminho, rol.names = FALSE)
dataset_TESTE <- df_total
dataset_TESTE <- df_total[,c(1:10)]
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
# --- teste lda
# Testes usando matriz de confusão
predictions_lda <- predict(fit.lda, dataset_TESTE)
lda <- data.frame(id = dataset_TESTE[,1], label = predictions_lda)
caminho <- file.choose()
write.csv2(lda, caminho, rol.names = FALSE)
write.csv2(lda, caminho, row.names = FALSE)
caminho <- file.choose()
write.csv2(lda, caminho, row.names = FALSE, sep = ',')
caminho <- file.choose()
write.table(lda, caminho, sep = ',')
caminho <- file.choose()
write.table(lda, caminho,row.names = FALSE, sep = ',')
